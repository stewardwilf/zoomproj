[{"/Users/wst15/Documents/zoom-app/my-app/src/reportWebVitals.js":"1","/Users/wst15/Documents/zoom-app/my-app/src/data/selected.tsx":"2","/Users/wst15/Documents/zoom-app/my-app/src/components/ParticipantList.tsx":"3","/Users/wst15/Documents/zoom-app/my-app/src/components/index.tsx":"4","/Users/wst15/Documents/zoom-app/my-app/src/components/Preview.tsx":"5","/Users/wst15/Documents/zoom-app/my-app/src/components/Footer.tsx":"6","/Users/wst15/Documents/zoom-app/my-app/src/components/Header.tsx":"7","/Users/wst15/Documents/zoom-app/my-app/src/components/SearchBar.tsx":"8","/Users/wst15/Documents/zoom-app/my-app/src/data/displayedParticipants.tsx":"9","/Users/wst15/Documents/zoom-app/my-app/src/data/Participants.tsx":"10","/Users/wst15/Documents/zoom-app/my-app/src/index.tsx":"11","/Users/wst15/Documents/zoom-app/my-app/src/App.tsx":"12"},{"size":362,"mtime":1609772368423,"results":"13","hashOfConfig":"14"},{"size":232,"mtime":1611590898501,"results":"15","hashOfConfig":"14"},{"size":4312,"mtime":1611590899865,"results":"16","hashOfConfig":"14"},{"size":193,"mtime":1611591380967,"results":"17","hashOfConfig":"14"},{"size":1814,"mtime":1611591473238,"results":"18","hashOfConfig":"14"},{"size":176,"mtime":1611591362474,"results":"19","hashOfConfig":"14"},{"size":169,"mtime":1611591375285,"results":"20","hashOfConfig":"14"},{"size":921,"mtime":1611591664744,"results":"21","hashOfConfig":"14"},{"size":168,"mtime":1611591718911,"results":"22","hashOfConfig":"14"},{"size":6777,"mtime":1611591827695,"results":"23","hashOfConfig":"14"},{"size":613,"mtime":1611591855990,"results":"24","hashOfConfig":"14"},{"size":430,"mtime":1611591850906,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"6460fn",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"31"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/wst15/Documents/zoom-app/my-app/src/reportWebVitals.js",[],["53","54"],"/Users/wst15/Documents/zoom-app/my-app/src/data/selected.tsx",[],["55","56"],"/Users/wst15/Documents/zoom-app/my-app/src/components/ParticipantList.tsx",["57","58"],"import React, { useState, useEffect } from 'react'\nimport { Button, Icon } from 'semantic-ui-react'\nimport { displayed } from '../data/displayedParticipants'\nimport { useRecoilState } from 'recoil'\nimport { Container, Draggable } from 'react-smooth-dnd';\nimport { selected as selectedp } from '../data/selected'\nimport {ParticipantsData} from '../types/types'\n\nexport const ParticipantList = () => {\n    const [selected, setSelected] = useRecoilState<ParticipantsData[]>(selectedp);\n    const [participantsData] = useRecoilState(displayed);\n    const [showSelected, setShowSelected] = useState(false);\n\n    useEffect(() => { //Remove default recoil value - do this in a cleaner way\n      setSelected([])\n     }, []);\n\n    const select = (name: ParticipantsData) => { //select individuals from list\n        if ((selected.filter((item:ParticipantsData) => item.id === name.id)).length < 1) {\n            setSelected([...selected,name])\n        }\n        else {\n            setSelected(selected.filter((item:ParticipantsData) => item.id !== name.id))\n        }\n    }\n\n    const reorderSelection = (event: any) => { //reorder selection on drag\n        let copy = [...selected]\n        copy.splice(event.removedIndex, 1); //remove one item where we pick element from\n        copy.splice(event.addedIndex, 0, selected[event.removedIndex]); //add removed item to new position\n        setSelected(copy)\n    }\n\n    const Selected = () => {\n        return (\n            <Button.Group fluid basic vertical className='ParticipantButtons'>\n                <Container dragHandleSelector=\".column-drag-handle\" onDrop={e => reorderSelection(e)}>\n                    {selected.map((p:ParticipantsData) => {\n                        return (\n                            <Draggable key={p.id}>\n                                <Button className=\"draggable-item\" active={true}>\n                                    <span className=\"column-drag-handle\">\n                                        <div className='left'>\n                                            <Icon name='edit' />\n                                            {p.title}\n                                        </div>\n                                        <div className='right'>\n                                            <Icon color={p.icon} name='wifi' />\n                                            <Icon name='mute' />\n                                        &#x2630;\n                                    </div>\n                                    </span>\n                                </Button>\n                            </Draggable>\n                        );\n                    })}\n                </Container>\n            </Button.Group>\n        )\n    }\n\n    const Selector = () => {\n        return (<Button.Group fluid basic vertical className='ParticipantButtons'>\n            {participantsData.map((person:ParticipantsData) =>\n                <Button \n                //className={selected.filter((item:ParticipantsData) => item.id === person.id) !== 0 ? 'active' : ''} \n                key={person.id} \n                onClick={() => { select(person) }} \n                active={selected.filter((item: ParticipantsData)=> item.id === person.id).length !=0 ? true : false}\n                >\n                    <div>\n                        <div className='left'>\n                            <Icon name='edit' />\n                            {person.title}\n                        </div> \n                        <div className='right'>\n                            <Icon color={person.icon} name='wifi' />\n                            <Icon name='mute' />\n                            \n                        </div>\n                    </div>\n                </Button>)}\n        </Button.Group>\n        )\n    }\n    const show = () => {\n        if (showSelected) {\n            setShowSelected(false)\n        }\n        else {\n            setShowSelected(true)\n        }\n    }\n    const clearSelected = () => {\n        setSelected([])\n      }\n    return (\n        <>\n            <Button onClick={() => show()}>{showSelected ? 'Show All' : 'Show Selected'}</Button>\n            {selected.length>0 ? <Button color='red' onClick={() => clearSelected()}>Clear Selection</Button> : <></>}\n            { showSelected ? <Selected /> : <Selector />}\n        </>)\n}\n","/Users/wst15/Documents/zoom-app/my-app/src/components/index.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/components/Preview.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/components/Footer.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/components/Header.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/components/SearchBar.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/data/displayedParticipants.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/data/Participants.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/index.tsx",[],"/Users/wst15/Documents/zoom-app/my-app/src/App.tsx",[],{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","severity":1,"message":"64","line":16,"column":9,"nodeType":"65","endLine":16,"endColumn":11,"suggestions":"66"},{"ruleId":"67","severity":1,"message":"68","line":69,"column":98,"nodeType":"69","messageId":"70","endLine":69,"endColumn":100},"no-native-reassign",["71"],"no-negated-in-lhs",["72"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'setSelected'. Either include it or remove the dependency array.","ArrayExpression",["73"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"74","fix":"75"},"Update the dependencies array to be: [setSelected]",{"range":"76","text":"77"},[712,714],"[setSelected]"]